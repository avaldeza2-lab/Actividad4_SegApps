name: CI/CD

on:
  push:
  pull_request:

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (app + dev)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
          if [ -f dev-requirements.txt ]; then python -m pip install -r dev-requirements.txt; fi

      - name: Run tests (pytest)
        run: |
          if [ -f pytest.ini ] || ls -1 tests/*.py 2>/dev/null; then pytest -q; else echo "No tests, skipping"; fi

      - name: Static analysis (Bandit)
        run: |
          python -m pip install bandit || true
          python -m bandit -r . -ll --exclude venv,tests || true

      - name: Dependency audit (pip-audit)
        run: |
          python -m pip install pip-audit || true
          python -m pip_audit || true

  ddeploy:
    needs: ci
    if: github.ref == 'refs/heads/main'
    runs-on: self-hosted

    env:
      APP_DIR: /opt/secure-app
      SERVICE_NAME: secure-app
      SERVICE_USER: andrea         # <-- tu usuario de Ubuntu
      MODULE: AppSegApps:app       # <-- tu mÃ³dulo:objeto Flask
      BIND: 127.0.0.1:8000
      WORKERS: "2"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Ensure app dir ownership (safety)
        run: |
          sudo mkdir -p "$APP_DIR"
          sudo chown -R "$USER:$USER" "$APP_DIR"

      - name: Sync code to $APP_DIR (skip .github and perms)
        run: |
          rsync -az --delete \
            --exclude ".git" \
            --exclude ".github" \
            --no-perms --no-owner --no-group \
            ./ "$APP_DIR/"

      - name: Create/Update systemd service
        run: |
          sudo bash -c 'cat > /etc/systemd/system/${SERVICE_NAME}.service <<EOF
          [Unit]
          Description=Secure Flask App (Gunicorn)
          After=network.target

          [Service]
          User=${SERVICE_USER}
          WorkingDirectory=${APP_DIR}
          Environment="PATH=${APP_DIR}/.venv/bin"
          ExecStart=${APP_DIR}/.venv/bin/gunicorn -w ${WORKERS} -b ${BIND} ${MODULE}
          Restart=always

          [Install]
          WantedBy=multi-user.target
          EOF'
          sudo systemctl daemon-reload

      - name: Create venv & install runtime deps
        run: |
          python3 -m venv "${APP_DIR}/.venv" || true
          . "${APP_DIR}/.venv/bin/activate"
          python -m pip install --upgrade pip
          if [ -f "${APP_DIR}/requirements.txt" ]; then pip install -r "${APP_DIR}/requirements.txt"; fi
          pip install gunicorn flask

      - name: Enable & restart service
        run: |
          sudo systemctl enable "${SERVICE_NAME}"
          sudo systemctl restart "${SERVICE_NAME}"
          systemctl --no-pager --full status "${SERVICE_NAME}" | head -n 30

      - name: Health check (local)
        run: |
          curl -sSf "http://127.0.0.1:8000/" | head -n 5 || (journalctl -u "${SERVICE_NAME}" -e --no-pager; exit 1)